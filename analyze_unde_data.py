import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

def analyze_unde_data(csv_file_path):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö UNDE"""
    print("üî¨ –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• UNDE DATA RECORDER")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        df = None
        for sep in [';', ',', '\t']:
            try:
                df = pd.read_csv(csv_file_path, sep=sep)
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                if len(df.columns) > 5:  # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫, –∑–Ω–∞—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {e}")
                continue
        
        if df is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
            return
            
        print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coord_data = df[(df['x'].notna()) & (df['y'].notna())]
        unique_coords = coord_data[['x', 'y']].drop_duplicates()
        
        print(f"\nüìç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–û–†–î–ò–ù–ê–¢:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"–ó–∞–ø–∏—Å–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(coord_data)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(unique_coords)}")
        
        if len(unique_coords) > 0:
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω X: {coord_data['x'].min():.0f} - {coord_data['x'].max():.0f}")
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω Y: {coord_data['y'].min():.0f} - {coord_data['y'].max():.0f}")
            
            print(f"\nüß≤ –ú–ê–ì–ù–ò–¢–ù–´–ï –î–ê–ù–ù–´–ï:")
            mag_data = df[df['bx'].notna()]
            if len(mag_data) > 0:
                print(f"–ó–∞–ø–∏—Å–µ–π —Å –º–∞–≥–Ω–∏—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(mag_data)}")
                print(f"Bx: {mag_data['bx'].min():.2f} - {mag_data['bx'].max():.2f} ŒºT")
                print(f"By: {mag_data['by'].min():.2f} - {mag_data['by'].max():.2f} ŒºT") 
                print(f"Bz: {mag_data['bz'].min():.2f} - {mag_data['bz'].max():.2f} ŒºT")
                
                if 'magnetic_magnitude' in df.columns:
                    mag_magnitude = df[df['magnetic_magnitude'].notna()]
                    if len(mag_magnitude) > 0:
                        print(f"–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {mag_magnitude['magnetic_magnitude'].min():.2f} - {mag_magnitude['magnetic_magnitude'].max():.2f} ŒºT")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞
        if 'poi_type' in df.columns:
            poi_data = df[df['poi_type'].notna()]
            if len(poi_data) > 0:
                print(f"\nüìå –¢–û–ß–ö–ò –ò–ù–¢–ï–†–ï–°–ê:")
                poi_counts = poi_data['poi_type'].value_counts()
                for poi_type, count in poi_counts.items():
                    print(f"‚Ä¢ {poi_type}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if len(coord_data) > 5:
            create_visualizations(coord_data)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ML –º–æ–¥–µ–ª—å
        if len(unique_coords) >= 10:
            test_ml_model(coord_data)
        else:
            print(f"\n‚ö†Ô∏è –î–ª—è ML –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫, —É –≤–∞—Å: {len(unique_coords)}")
            
        # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        evaluate_data_readiness(df, coord_data, unique_coords)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def create_visualizations(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print(f"\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('UNDE - –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', fontsize=16, fontweight='bold')
    
    # 1. –ö–∞—Ä—Ç–∞ —Ç–æ—á–µ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    ax1 = axes[0, 0]
    if 'magnetic_magnitude' in data.columns:
        scatter = ax1.scatter(data['x'], data['y'], 
                            c=data['magnetic_magnitude'], 
                            cmap='viridis', alpha=0.7, s=50)
        plt.colorbar(scatter, ax=ax1, label='–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (ŒºT)')
    else:
        scatter = ax1.scatter(data['x'], data['y'], 
                            c=data['bz'], 
                            cmap='viridis', alpha=0.7, s=50)
        plt.colorbar(scatter, ax=ax1, label='Bz (ŒºT)')
    
    ax1.set_title('–ö–∞—Ä—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö')
    ax1.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞')
    ax1.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞')
    ax1.grid(True, alpha=0.3)
    
    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è
    ax2 = axes[0, 1]
    if len(data[data['bx'].notna()]) > 0:
        ax2.hist(data['bx'].dropna(), alpha=0.7, label='Bx', bins=30, color='red')
        ax2.hist(data['by'].dropna(), alpha=0.7, label='By', bins=30, color='green')
        ax2.hist(data['bz'].dropna(), alpha=0.7, label='Bz', bins=30, color='blue')
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è')
        ax2.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ (ŒºT)')
        ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
    
    # 3. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    ax3 = axes[1, 0]
    unique_points = data[['x', 'y']].drop_duplicates()
    ax3.scatter(unique_points['x'], unique_points['y'], 
               s=100, alpha=0.8, c='red', marker='o')
    ax3.set_title(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞ ({len(unique_points)} —à—Ç.)')
    ax3.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞')
    ax3.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞')
    ax3.grid(True, alpha=0.3)
    
    # 4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ—á–∫–∞–º
    ax4 = axes[1, 1]
    if len(data) > 0:
        point_counts = data.groupby(['x', 'y']).size().sort_values(ascending=False).head(10)
        ax4.bar(range(len(point_counts)), point_counts.values)
        ax4.set_title('–¢–û–ü-10 —Ç–æ—á–µ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π')
        ax4.set_xlabel('–¢–æ—á–∫–∏')
        ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
        ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('unde_data_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'unde_data_analysis.png'")

def test_ml_model(data):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –º–æ–¥–µ–ª–∏"""
    print(f"\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –ú–û–î–ï–õ–ò")
    print("=" * 30)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    ml_data = data[(data['x'].notna()) & (data['y'].notna()) & 
                   (data['bx'].notna()) & (data['by'].notna()) & (data['bz'].notna())]
    
    if len(ml_data) < 10:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML")
        return
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    features = ['bx', 'by', 'bz']
    if 'magnetic_magnitude' in ml_data.columns:
        features.append('magnetic_magnitude')
    
    X = ml_data[features]
    y = ml_data[['x', 'y']]
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è ML: {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"üéØ –ü—Ä–∏–∑–Ω–∞–∫–∏: {features}")
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if len(X) >= 20:
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    else:
        X_train, X_test, y_train, y_test = X, X, y, y
        print("‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = KNeighborsRegressor(n_neighbors=min(5, len(X_train)))
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = model.predict(X_test)
    
    # –û—Ü–µ–Ω–∫–∞
    mse_x = mean_squared_error(y_test['x'], y_pred[:, 0])
    mse_y = mean_squared_error(y_test['y'], y_pred[:, 1])
    rmse_overall = np.sqrt((mse_x + mse_y) / 2)
    
    print(f"üìè RMSE: {rmse_overall:.2f}")
    
    if rmse_overall < 5.0:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å")
    elif rmse_overall < 15.0:
        print("‚úÖ –•–û–†–û–®–û! –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
    else:
        print("‚ö†Ô∏è –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ª—É—á—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ")

def evaluate_data_readiness(df, coord_data, unique_coords):
    """–û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüìã –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    score = 0
    max_score = 100
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
    if len(unique_coords) >= 30:
        points_score = 30
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: –û–¢–õ–ò–ß–ù–û (30+ —Ç–æ—á–µ–∫)")
    elif len(unique_coords) >= 20:
        points_score = 25
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: –•–û–†–û–®–û (20+ —Ç–æ—á–µ–∫)")
    elif len(unique_coords) >= 10:
        points_score = 15
        print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û (10+ —Ç–æ—á–µ–∫)")
    else:
        points_score = 5
        print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: –ú–ê–õ–û (< 10 —Ç–æ—á–µ–∫)")
    
    score += points_score
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    mag_data = df[(df['bx'].notna()) & (df['by'].notna()) & (df['bz'].notna())]
    if len(mag_data) > len(df) * 0.8:
        mag_score = 25
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –û–¢–õ–ò–ß–ù–û")
    elif len(mag_data) > len(df) * 0.5:
        mag_score = 20
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –•–û–†–û–®–û")
    else:
        mag_score = 10
        print("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û")
    
    score += mag_score
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    if len(coord_data) > 0:
        area_coverage = (coord_data['x'].max() - coord_data['x'].min()) * (coord_data['y'].max() - coord_data['y'].min())
        if area_coverage > 10000:
            coverage_score = 25
            print("‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: –û–¢–õ–ò–ß–ù–û")
        elif area_coverage > 5000:
            coverage_score = 20
            print("‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: –•–û–†–û–®–û")
        else:
            coverage_score = 15
            print("‚ö†Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û")
    else:
        coverage_score = 0
        print("‚ùå –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: –ù–ï–¢ –î–ê–ù–ù–´–•")
    
    score += coverage_score
    
    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if len(unique_coords) > 0:
        points_per_unit = len(coord_data) / len(unique_coords)
        if points_per_unit > 50:
            distribution_score = 20
            print("‚úÖ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –û–¢–õ–ò–ß–ù–û")
        elif points_per_unit > 20:
            distribution_score = 15
            print("‚úÖ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –•–û–†–û–®–û")
        else:
            distribution_score = 10
            print("‚ö†Ô∏è –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û")
    else:
        distribution_score = 0
    
    score += distribution_score
    
    print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {score}/{max_score} ({score/max_score*100:.1f}%)")
    
    if score >= 80:
        print("üéâ –ì–û–¢–û–í–û –ö –°–û–ó–î–ê–ù–ò–Æ NAVIGATOR!")
        print("‚úÖ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    elif score >= 60:
        print("‚úÖ –•–û–†–û–®–ê–Ø –û–°–ù–û–í–ê")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –ë–û–õ–¨–®–ï –î–ê–ù–ù–´–•")
        print("üìç –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –ø–æ –≤—Å–µ–º—É –ø–æ–º–µ—â–µ–Ω–∏—é")

if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–π —Ñ–∞–π–ª
    csv_file = "/srv/flutter/projects/unde_data_recorder/1.csv"
    analyze_unde_data(csv_file)
