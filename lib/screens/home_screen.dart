// lib/screens/home_screen.dart - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import 'package:flutter/material.dart';
import '../services/sensor_service.dart';
import '../services/location_recorder.dart';
import '../services/server_service.dart';
import '../screens/map_screen.dart';
import '../screens/preset_points_screen.dart';
import '../screens/server_test_screen.dart';
import '../screens/team_login_screen.dart';
import '../screens/map_upload_screen.dart';
import '../screens/record_point_screen.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final SensorService _sensorService = SensorService();
  final LocationRecorder _locationRecorder = LocationRecorder();
  bool _isRecording = false;
  bool _sensorsAvailable = false;
  String _statusMessage = '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏';

  @override
  void initState() {
    super.initState();
    _checkSensors();
  }

  void _checkSensors() {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–æ–≤
    setState(() {
      _sensorsAvailable = true;
      _statusMessage = '–î–∞—Ç—á–∏–∫–∏ –≥–æ—Ç–æ–≤—ã';
    });
  }

  Future<void> _toggleRecording() async {
    if (!_sensorsAvailable) {
      _showErrorDialog('–î–∞—Ç—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      return;
    }

    setState(() {
      _isRecording = !_isRecording;
      _statusMessage = _isRecording ? '–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö...' : '–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    });

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ —Å –≤–∞—à–∏–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    if (_isRecording) {
      // _sensorService.–≤–∞—à_–º–µ—Ç–æ–¥_—Å—Ç–∞—Ä—Ç–∞();
    } else {
      // _sensorService.–≤–∞—à_–º–µ—Ç–æ–¥_–æ—Å—Ç–∞–Ω–æ–≤–∫–∏();
    }
  }

  Future<void> _clearData() async {
    final confirmed = await _showConfirmDialog(
      '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
    );

    if (confirmed) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  Future<void> _exportData() async {
    try {
      setState(() {
        _statusMessage = '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...';
      });

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
      // final result = await _locationRecorder.–≤–∞—à–ú–µ—Ç–æ–¥–≠–∫—Å–ø–æ—Ä—Ç–∞();
      
      setState(() {
        _statusMessage = '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω';
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('üìÅ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã'),
          duration: Duration(seconds: 3),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      setState(() {
        _statusMessage = '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: $e';
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _syncWithServer() async {
    final serverService = ServerService();
    await serverService.initialize();

    if (!serverService.isLoggedIn) {
      _showErrorDialog(
        '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
      );
      return;
    }

    try {
      setState(() {
        _statusMessage = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...';
      });

      // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      final dataToSync = [
        {
          'magnetometer_x': 1.0,
          'magnetometer_y': 2.0,
          'magnetometer_z': 3.0,
          'x': 100.0,
          'y': 200.0,
          'z': 0.0,
          'timestamp': DateTime.now().toIso8601String(),
        }
      ];

      final success = await serverService.uploadSensorDataWithUser(dataToSync);
      
      if (success) {
        setState(() {
          _statusMessage = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        setState(() {
          _statusMessage = '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏';
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      setState(() {
        _statusMessage = '–û—à–∏–±–∫–∞: $e';
      });
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå –û—à–∏–±–∫–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showUserInfo() async {
    final serverService = ServerService();
    await serverService.initialize();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (serverService.isLoggedIn) ...[
              Text('–ò–º—è: ${serverService.currentUserName}'),
              SizedBox(height: 8),
              Text('–†–æ–ª—å: ${_getRoleDisplayName(serverService.currentUserRole)}'),
              SizedBox(height: 8),
              Text('ID –∫–æ–º–∞–Ω–¥—ã: ${serverService.teamId ?? "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"}'),
              SizedBox(height: 8),
              Text('ID –ø—Ä–æ–µ–∫—Ç–∞: ${serverService.projectId ?? "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}'),
            ] else ...[
              Text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'),
              SizedBox(height: 8),
              Text('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ'),
            ],
            SizedBox(height: 16),
            Text('–°–µ—Ä–≤–µ—Ä: ${serverService.serverUrl}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
          if (!serverService.isLoggedIn)
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(builder: (context) => TeamLoginScreen()),
                );
              },
              child: Text('–í–æ–π—Ç–∏'),
            ),
        ],
      ),
    );
  }

  void _logout() async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üö™ –í—ã—Ö–æ–¥'),
        content: Text('–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?\n\n–î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ª–æ–∫–∞–ª—å–Ω–æ.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () async {
              final serverService = ServerService();
              await serverService.logoutUser();
              
              Navigator.of(context).pop();
              
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: Text('–í—ã–π—Ç–∏'),
          ),
        ],
      ),
    );
  }

  String _getRoleDisplayName(String? role) {
    switch (role) {
      case 'admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'coordinator':
        return '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä';
      case 'collector':
        return '–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
    }
  }

  Future<bool> _showConfirmDialog(String title, String content) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Text(content),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'),
          ),
        ],
      ),
    );
    return result ?? false;
  }

  void _showErrorDialog(String title, String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('OK'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('UNDE Data Recorder'),
        backgroundColor: Colors.blue[400],
        actions: [
          // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
          IconButton(
            icon: Icon(Icons.cloud_outlined),
            tooltip: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(builder: (context) => ServerTestScreen()),
              );
            },
          ),
          // –ú–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
          PopupMenuButton<String>(
            onSelected: (value) async {
              if (value == 'server_test') {
                Navigator.of(context).push(
                  MaterialPageRoute(builder: (context) => ServerTestScreen()),
                );
              } else if (value == 'user_info') {
                _showUserInfo();
              } else if (value == 'logout') {
                _logout();
              }
            },
            itemBuilder: (BuildContext context) => [
              PopupMenuItem(
                value: 'server_test',
                child: Row(
                  children: [
                    Icon(Icons.cloud_outlined, size: 16),
                    SizedBox(width: 8),
                    Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'),
                  ],
                ),
              ),
              PopupMenuItem(
                value: 'user_info',
                child: Row(
                  children: [
                    Icon(Icons.person, size: 16),
                    SizedBox(width: 8),
                    Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'),
                  ],
                ),
              ),
              PopupMenuItem(
                value: 'logout',
                child: Row(
                  children: [
                    Icon(Icons.logout, size: 16, color: Colors.red),
                    SizedBox(width: 8),
                    Text('–í—ã–π—Ç–∏', style: TextStyle(color: Colors.red)),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∞
            Card(
              child: Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          _sensorsAvailable ? Icons.sensors : Icons.error,
                          color: _sensorsAvailable ? Colors.green : Colors.red,
                        ),
                        SizedBox(width: 8),
                        Text(
                          '–°—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–æ–≤',
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    SizedBox(height: 8),
                    Text(_statusMessage),
                  ],
                ),
              ),
            ),

            SizedBox(height: 16),

            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            Expanded(
              child: Column(
                children: [
                  // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
                  SizedBox(
                    width: double.infinity,
                    height: 60,
                    child: ElevatedButton(
                      onPressed: _sensorsAvailable ? _toggleRecording : null,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: _isRecording ? Colors.red : Colors.green,
                        foregroundColor: Colors.white,
                      ),
                      child: Text(
                        _isRecording ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),

                  SizedBox(height: 16),

                  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () {
                            Navigator.of(context).push(
                              MaterialPageRoute(builder: (context) => MapUploadScreen()),
                            );
                          },
                          icon: Icon(Icons.map),
                          label: Text('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue[400],
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                      SizedBox(width: 8),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () {
                            Navigator.of(context).push(
                              MaterialPageRoute(builder: (context) => PresetPointsScreen(
                                onPointSelected: (x, y, name, type) {
                                  Navigator.of(context).push(
                                    MaterialPageRoute(builder: (context) => RecordPointScreen(
                                      x: x,
                                      y: y,
                                      name: name,
                                      type: type,
                                    )),
                                  );
                                },
                              )),
                            );
                          },
                          icon: Icon(Icons.location_on),
                          label: Text('–¢–æ—á–∫–∏'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange[400],
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),

                  SizedBox(height: 12),

                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _exportData,
                          icon: Icon(Icons.download),
                          label: Text('–≠–∫—Å–ø–æ—Ä—Ç'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green[600],
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                      SizedBox(width: 8),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _syncWithServer,
                          icon: Icon(Icons.cloud_upload),
                          label: Text('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.indigo[400],
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ),
                    ],
                  ),

                  SizedBox(height: 12),

                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: _clearData,
                      icon: Icon(Icons.delete_forever),
                      label: Text('–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[600],
                        foregroundColor: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    super.dispose();
  }
}
