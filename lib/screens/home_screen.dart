import 'package:flutter/material.dart';
import 'dart:io';
import 'dart:convert';
import 'package:path_provider/path_provider.dart';
import '../services/sensor_service.dart';
import '../services/location_recorder.dart';
import '../widgets/compass_widget.dart';
import 'map_screen.dart';
import 'preset_points_screen.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final SensorService _sensorService = SensorService();
  final LocationRecorder _locationRecorder = LocationRecorder();
  
  Map<String, dynamic> _currentSensorValues = {};
  Map<String, dynamic> _recordingStats = {};
  
  String _selectedFloor = "1";
  String? _selectedPoiType;
  String _currentConditions = '';
  List<String> _currentConditionsList = [];
  
  final TextEditingController _xController = TextEditingController();
  final TextEditingController _yController = TextEditingController();
  final TextEditingController _fileNameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();

  // –¢–∏–ø—ã —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞
  final List<String> _poiTypes = [
    '–ú–∞–≥–∞–∑–∏–Ω',
    '–ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω', 
    '–≠—Å–∫–∞–ª–∞—Ç–æ—Ä',
    '–õ–∏—Ñ—Ç',
    '–¢—É–∞–ª–µ—Ç',
    '–ë–∞–Ω–∫–æ–º–∞—Ç',
    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '–í—ã—Ö–æ–¥',
    '–ü–∞—Ä–∫–æ–≤–∫–∞',
    '–ö–æ—Ä–∏–¥–æ—Ä',
    '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫',
    '–î—Ä—É–≥–æ–µ'
  ];

  @override
  void initState() {
    super.initState();
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 100–º—Å
    Stream.periodic(Duration(milliseconds: 100), (i) => i).listen((_) {
      if (mounted) {
        setState(() {
          _currentSensorValues = _sensorService.getCurrentSensorValues();
          _recordingStats = _locationRecorder.getRecordingStats();
        });
      }
    });
  }

  @override
  void dispose() {
    _sensorService.dispose();
    _locationRecorder.dispose();
    _xController.dispose();
    _yController.dispose();
    _fileNameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _startRecording() {
    if (!_sensorService.isRecording) {
      _sensorService.setFloor(_selectedFloor);
      _sensorService.startRecording();
      _locationRecorder.startRecording(
        _sensorService.dataStream,
        fileName: _fileNameController.text.isNotEmpty ? _fileNameController.text : null,
      );
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞')),
      );
    }
  }

  void _stopRecording() {
    if (_sensorService.isRecording) {
      _sensorService.stopRecording();
      _locationRecorder.stopRecording();
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')),
      );
    }
  }

  Future<void> _saveData() async {
    try {
      final filePath = await _locationRecorder.saveToFile();
      final dataPointsCount = _recordingStats['totalPoints'] ?? 0;
      
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:'),
              SizedBox(height: 8),
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(4),
                ),
                child: SelectableText(
                  filePath,
                  style: TextStyle(fontSize: 12, fontFamily: 'monospace'),
                ),
              ),
              SizedBox(height: 12),
              Text('–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: $dataPointsCount'),
              if (_currentConditions.isNotEmpty) ...[
                SizedBox(height: 8),
                Text('–£—Å–ª–æ–≤–∏—è: $_currentConditions'),
              ],
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('OK'),
            ),
          ],
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e')),
      );
    }
  }

  void _markPosition() {
    final x = double.tryParse(_xController.text);
    final y = double.tryParse(_yController.text);
    
    if (x != null && y != null) {
      _sensorService.markPosition(x, y);
      _sensorService.setPoiInfo(_selectedPoiType, _descriptionController.text.isNotEmpty ? _descriptionController.text : null);
      
      String message = '–ü–æ–∑–∏—Ü–∏—è –æ—Ç–º–µ—á–µ–Ω–∞: ($x, $y)';
      if (_selectedPoiType != null) {
        message += '\n–¢–∏–ø: $_selectedPoiType';
      }
      if (_descriptionController.text.isNotEmpty) {
        message += '\n–û–ø–∏—Å–∞–Ω–∏–µ: ${_descriptionController.text}';
      }
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(message), duration: Duration(seconds: 3)),
      );
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏
      _xController.clear();
      _yController.clear();
      _descriptionController.clear();
      setState(() {
        _selectedPoiType = null;
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')),
      );
    }
  }

  void _resetStepCounter() {
    _sensorService.resetStepCount();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤ —Å–±—Ä–æ—à–µ–Ω')),
    );
  }

  void _openMapScreen() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => MapScreen(
          onPointSelected: (x, y) {
            setState(() {
              _xController.text = x.toInt().toString();
              _yController.text = y.toInt().toString();
            });
            _markPosition();
          },
        ),
      ),
    );
  }

  void _showConditionsDialog() {
    String? selectedTime;
    String? selectedCrowd;
    String? selectedWeather;
    String? selectedActivity;
    
    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text('üåü –£—Å–ª–æ–≤–∏—è –∑–∞–ø–∏—Å–∏'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('–í—Ä–µ–º—è —Å—É—Ç–æ–∫:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–£—Ç—Ä–æ (6-12)', '–î–µ–Ω—å (12-18)', '–í–µ—á–µ—Ä (18-22)', '–ù–æ—á—å (22-6)'].map((time) => 
                    FilterChip(
                      label: Text(time, style: TextStyle(fontSize: 12)),
                      selected: selectedTime == time,
                      onSelected: (selected) {
                        setState(() {
                          selectedTime = selected ? time : null;
                        });
                      },
                      selectedColor: Colors.blue[100],
                    ),
                  ).toList(),
                ),
                
                SizedBox(height: 16),
                Text('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–ü—É—Å—Ç–æ (0-5)', '–ú–∞–ª–æ (5-20)', '–°—Ä–µ–¥–Ω–µ (20-50)', '–ú–Ω–æ–≥–æ (50+)'].map((crowd) => 
                    FilterChip(
                      label: Text(crowd, style: TextStyle(fontSize: 12)),
                      selected: selectedCrowd == crowd,
                      onSelected: (selected) {
                        setState(() {
                          selectedCrowd = selected ? crowd : null;
                        });
                      },
                      selectedColor: Colors.green[100],
                    ),
                  ).toList(),
                ),
                
                SizedBox(height: 16),
                Text('–ü–æ–≥–æ–¥–∞:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–°–æ–ª–Ω–µ—á–Ω–æ', '–û–±–ª–∞—á–Ω–æ', '–î–æ–∂–¥—å', '–°–Ω–µ–≥', '–¢—É–º–∞–Ω'].map((weather) => 
                    FilterChip(
                      label: Text(weather, style: TextStyle(fontSize: 12)),
                      selected: selectedWeather == weather,
                      onSelected: (selected) {
                        setState(() {
                          selectedWeather = selected ? weather : null;
                        });
                      },
                      selectedColor: Colors.orange[100],
                    ),
                  ).toList(),
                ),
                
                SizedBox(height: 16),
                Text('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è', '–û–±–µ–¥', '–í—ã—Ö–æ–¥–Ω–æ–π', '–ü—Ä–∞–∑–¥–Ω–∏–∫', '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞'].map((activity) => 
                    FilterChip(
                      label: Text(activity, style: TextStyle(fontSize: 12)),
                      selected: selectedActivity == activity,
                      onSelected: (selected) {
                        setState(() {
                          selectedActivity = selected ? activity : null;
                        });
                      },
                      selectedColor: Colors.purple[100],
                    ),
                  ).toList(),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: () {
                final conditions = <String>[];
                if (selectedTime != null) conditions.add(selectedTime!);
                if (selectedCrowd != null) conditions.add(selectedCrowd!);
                if (selectedWeather != null) conditions.add(selectedWeather!);
                if (selectedActivity != null) conditions.add(selectedActivity!);
                
                Navigator.of(context).pop();
                
                setState(() {
                  _currentConditions = conditions.join(' | ');
                  _currentConditionsList = conditions;
                });
                
                if (conditions.isNotEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('‚úÖ –£—Å–ª–æ–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã'),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              },
              child: Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }

  void _importFloorPlan() async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üìê –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –∑–¥–∞–Ω–∏—è'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:', style: TextStyle(fontWeight: FontWeight.bold)),
            SizedBox(height: 8),
            Text('üìÑ PDF - –ø–ª–∞–Ω—ã –∏–∑ AutoCAD, Visio'),
            Text('üñºÔ∏è PNG/JPG - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤'),
            Text('üìä SVG - –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã'),
            SizedBox(height: 12),
            Text('–ü–ª–∞–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:', style: TextStyle(fontWeight: FontWeight.bold)),
            Text('‚Ä¢ –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–∞—Ä—Ç'),
            Text('‚Ä¢ –ö–∞–∫ –ø–æ–¥–ª–æ–∂–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'),
            Text('‚Ä¢ –í Navigator –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton.icon(
            onPressed: () async {
              Navigator.of(context).pop();
              await _selectFloorPlanFile();
            },
            icon: Icon(Icons.file_upload),
            label: Text('–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.teal,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _selectFloorPlanFile() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–ª–∞–Ω–∞...'),
            ],
          ),
        ),
      );

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ (–ø–æ–∫–∞ –±–µ–∑ file_picker)
      await Future.delayed(Duration(seconds: 1));
      
      Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–∞ –∑–¥–∞–Ω–∏—è:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 12),
                
                Text('1Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω:', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–ª–∞–Ω –≤ PNG/JPG/PDF (–¥–æ 500 –ú–ë)'),
                Text('‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±–æ–ª—å—à–∏–µ –ø–ª–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤'),
                Text('‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 300-600 DPI'),
                Text('‚Ä¢ –ú–∞—Å—à—Ç–∞–±: 1:100, 1:200 –∏–ª–∏ 1:500'),
                SizedBox(height: 8),
                
                Text('2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ Downloads:', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: floor_plan.png (–∏–ª–∏ .jpg)'),
                Text('‚Ä¢ –ü—É—Ç—å: /Downloads/floor_plan.png'),
                SizedBox(height: 8),
                
                Text('3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω":', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('‚Ä¢ –ü–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è'),
                Text('‚Ä¢ –ü–æ—è–≤–∏—Ç—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–∞—Ä—Ç –∫–∞–∫ —Ñ–æ–Ω'),
                SizedBox(height: 12),
                
                Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.blue[50],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('üí° –°–æ–≤–µ—Ç:', style: TextStyle(fontWeight: FontWeight.bold)),
                      Text('–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ "–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É" ‚Üí –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è'),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('–ü–æ–Ω—è—Ç–Ω–æ'),
            ),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.of(context).pop();
                _loadFloorPlanFromDownloads();
              },
              icon: Icon(Icons.download),
              label: Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      );
      
    } catch (e) {
      Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _loadFloorPlanFromDownloads() async {
    try {
      final downloadsPath = '/storage/emulated/0/Download';
      final possibleFiles = [
        'floor_plan.png',
        'floor_plan.jpg',
        'floor_plan.jpeg',
        'floor_plan.pdf',
        'plan.png',
        'plan.jpg',
        'plan.pdf',
        'building_plan.png',
        'building_plan.jpg',
        'building_plan.pdf',
        'mall_plan.png',
        'mall_plan.jpg',
        'shopping_center.png',
        'shopping_center.jpg',
      ];

      File? planFile;
      String? foundFileName;
      int fileSize = 0; // –ò–∑–º–µ–Ω–∏–ª–∏ —Å int? –Ω–∞ int —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º

      // –ò—â–µ–º —Ñ–∞–π–ª –ø–ª–∞–Ω–∞ –≤ Downloads
      for (final fileName in possibleFiles) {
        final file = File('$downloadsPath/$fileName');
        if (await file.exists()) {
          fileSize = await file.length();
          planFile = file;
          foundFileName = fileName;
          break;
        }
      }

      if (planFile != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ª–∏–º–∏—Ç 500 –ú–ë)
        final maxSize = 500 * 1024 * 1024; // 500 –ú–ë
        if (fileSize > maxSize) {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text('‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fileSize / 1024 / 1024).toStringAsFixed(1)} –ú–ë'),
                  Text('–ú–∞–∫—Å–∏–º—É–º: 500 –ú–ë'),
                  SizedBox(height: 12),
                  Text('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', style: TextStyle(fontWeight: FontWeight.bold)),
                  Text('‚Ä¢ –°–æ–∂–º–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ'),
                  Text('‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ 150-300 DPI'),
                  Text('‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ JPEG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 80-90%'),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: Text('–ü–æ–Ω—è—Ç–Ω–æ'),
                ),
              ],
            ),
          );
          return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (context) => AlertDialog(
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 16),
                Text('–ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –ø–ª–∞–Ω...'),
                Text('${(fileSize / 1024 / 1024).toStringAsFixed(1)} –ú–ë'),
              ],
            ),
          ),
        );

        // –ö–æ–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω –≤ –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        final directory = await getApplicationDocumentsDirectory();
        final extension = foundFileName!.split('.').last;
        final appPlanFile = File('${directory.path}/imported_floor_plan.$extension');
        await planFile.copy(appPlanFile.path);

        Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        final planInfo = {
          'imported': true,
          'fileName': foundFileName,
          'importDate': DateTime.now().millisecondsSinceEpoch,
          'filePath': appPlanFile.path,
          'fileSize': fileSize,
          'fileSizeMB': (fileSize / 1024 / 1024).toStringAsFixed(1),
        };

        final infoFile = File('${directory.path}/floor_plan_info.json');
        await infoFile.writeAsString(jsonEncode(planInfo));

        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text('‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('üìÅ –§–∞–π–ª: $foundFileName'),
                Text('üìä –†–∞–∑–º–µ—Ä: ${(fileSize / 1024 / 1024).toStringAsFixed(1)} –ú–ë'),
                Text('üìÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${DateTime.now().toString().split('.')[0]}'),
                SizedBox(height: 12),
                Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.green[50],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('–ü–ª–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤:', style: TextStyle(fontWeight: FontWeight.bold)),
                      Text('‚Ä¢ –†–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–∞—Ä—Ç –∫–∞–∫ —Ñ–æ–Ω'),
                      Text('‚Ä¢ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫'),
                      Text('‚Ä¢ –í —Ä–µ–∂–∏–º–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'),
                    ],
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('–û—Ç–ª–∏—á–Ω–æ!'),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.of(context).pop();
                  _openMapScreen(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω
                },
                icon: Icon(Icons.map),
                label: Text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        );

      } else {
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text('üìÅ –§–∞–π–ª –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–ª–∞–Ω–∞ –≤ Downloads.'),
                  SizedBox(height: 12),
                  Text('–û–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:', style: TextStyle(fontWeight: FontWeight.bold)),
                  ...possibleFiles.take(8).map((name) => Text('‚Ä¢ $name')),
                  Text('‚Ä¢ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...'),
                  SizedBox(height: 12),
                  Container(
                    padding: EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.blue[50],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:', style: TextStyle(fontWeight: FontWeight.bold)),
                        Text('‚Ä¢ PNG, JPG, PDF –¥–æ 500 –ú–ë'),
                        Text('‚Ä¢ –ü–ª–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤'),
                        Text('‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏'),
                        Text('‚Ä¢ –§–∞–π–ª—ã –∏–∑ AutoCAD, Visio'),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('–ü–æ–Ω—è—Ç–Ω–æ'),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.of(context).pop();
                  _selectFloorPlanFile(); // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                },
                icon: Icon(Icons.refresh),
                label: Text('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'),
              ),
            ],
          ),
        );
      }

    } catch (e) {
      Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _managePresetPoints() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => PresetPointsScreen(
          onPointSelected: (x, y, name, type) {
            setState(() {
              _xController.text = x.toInt().toString();
              _yController.text = y.toInt().toString();
              _selectedPoiType = type;
              _descriptionController.text = name;
            });
            
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ "$name"'),
                backgroundColor: Colors.green,
              ),
            );
          },
        ),
      ),
    );
  }

  void _startPrecisionCalibration() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üéØ –†–µ–∂–∏–º —Ç–æ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ < 1 –º–µ—Ç—Ä–∞:', 
                   style: TextStyle(fontWeight: FontWeight.bold)),
              SizedBox(height: 12),
              Text('üì± –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ 4 –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è—Ö:', 
                   style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue)),
              SizedBox(height: 8),
              Text('‚Ä¢ üì± –ü–æ—Ä—Ç—Ä–µ—Ç (–æ–±—ã—á–Ω–æ)'),
              Text('‚Ä¢ üì≤ –ê–ª—å–±–æ–º –≤–ª–µ–≤–æ'),
              Text('‚Ä¢ üì≥ –ê–ª—å–±–æ–º –≤–ø—Ä–∞–≤–æ'),
              Text('‚Ä¢ üôÉ –ü–æ—Ä—Ç—Ä–µ—Ç –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏'),
              SizedBox(height: 12),
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.orange[50],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    Text('‚è±Ô∏è –ü–æ 15 —Å–µ–∫—É–Ω–¥ –≤ –∫–∞–∂–¥–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏', 
                         style: TextStyle(fontWeight: FontWeight.bold)),
                    SizedBox(height: 4),
                    Text('üß≠ –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —ç–∫—Ä–∞–Ω–æ–º –Ω–∞ –°–ï–í–ï–†'),
                    Text('üìç –°—Ç–æ–π—Ç–µ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ'),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _showCalibrationSettings();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.deepPurple,
              foregroundColor: Colors.white,
            ),
            child: Text('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É'),
          ),
        ],
      ),
    );
  }

  void _showCalibrationSettings() {
    String selectedTimeOfDay = _getCurrentTimeOfDay();
    String selectedCrowd = '–°—Ä–µ–¥–Ω–µ (20-50 —á–µ–ª)';
    String selectedWeather = '–û–±—ã—á–Ω–æ';
    String customComment = '';
    
    final commentController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('üïê –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–£—Ç—Ä–æ (6-12)', '–î–µ–Ω—å (12-18)', '–í–µ—á–µ—Ä (18-22)', '–ù–æ—á—å (22-6)'].map((time) => 
                    FilterChip(
                      label: Text(time, style: TextStyle(fontSize: 11)),
                      selected: selectedTimeOfDay == time,
                      onSelected: (selected) {
                        setState(() {
                          selectedTimeOfDay = selected ? time : selectedTimeOfDay;
                        });
                      },
                      selectedColor: Colors.blue[100],
                    ),
                  ).toList(),
                ),
                
                SizedBox(height: 16),
                Text('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–ü—É—Å—Ç–æ (0-5)', '–ú–∞–ª–æ (5-20)', '–°—Ä–µ–¥–Ω–µ (20-50)', '–ú–Ω–æ–≥–æ (50+)', '–û—á–µ–Ω—å –º–Ω–æ–≥–æ (100+)'].map((crowd) => 
                    FilterChip(
                      label: Text(crowd, style: TextStyle(fontSize: 11)),
                      selected: selectedCrowd == crowd,
                      onSelected: (selected) {
                        setState(() {
                          selectedCrowd = selected ? crowd : selectedCrowd;
                        });
                      },
                      selectedColor: Colors.green[100],
                    ),
                  ).toList(),
                ),
                
                SizedBox(height: 16),
                Text('üå§Ô∏è –£—Å–ª–æ–≤–∏—è:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: ['–û–±—ã—á–Ω–æ', '–î–æ–∂–¥—å –Ω–∞ —É–ª–∏—Ü–µ', '–ñ–∞—Ä–∞', '–•–æ–ª–æ–¥–Ω–æ', '–†–µ–º–æ–Ω—Ç —Ä—è–¥–æ–º', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'].map((weather) => 
                    FilterChip(
                      label: Text(weather, style: TextStyle(fontSize: 11)),
                      selected: selectedWeather == weather,
                      onSelected: (selected) {
                        setState(() {
                          selectedWeather = selected ? weather : selectedWeather;
                        });
                      },
                      selectedColor: Colors.orange[100],
                    ),
                  ).toList(),
                ),
                
                SizedBox(height: 16),
                Text('üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                TextField(
                  controller: commentController,
                  decoration: InputDecoration(
                    hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —É –∫–∞—Å—Å", "–¢–∏—Ö–∏–π —á–∞—Å"',
                    border: OutlineInputBorder(),
                    contentPadding: EdgeInsets.all(12),
                  ),
                  maxLines: 2,
                  onChanged: (value) {
                    customComment = value;
                  },
                ),
                
                SizedBox(height: 16),
                Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.purple[50],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('üìã –ò—Ç–æ–≥–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:', style: TextStyle(fontWeight: FontWeight.bold)),
                      SizedBox(height: 4),
                      Text('‚Ä¢ –í—Ä–µ–º—è: $selectedTimeOfDay', style: TextStyle(fontSize: 12)),
                      Text('‚Ä¢ –õ—é–¥–µ–π: $selectedCrowd', style: TextStyle(fontSize: 12)),
                      Text('‚Ä¢ –£—Å–ª–æ–≤–∏—è: $selectedWeather', style: TextStyle(fontSize: 12)),
                      if (customComment.isNotEmpty)
                        Text('‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $customComment', style: TextStyle(fontSize: 12)),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
                final conditions = <String>[];
                conditions.add(selectedTimeOfDay);
                conditions.add(selectedCrowd);
                conditions.add(selectedWeather);
                if (customComment.isNotEmpty) {
                  conditions.add(customComment);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                setState(() {
                  _currentConditions = conditions.join(' | ');
                  _currentConditionsList = conditions;
                });
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
                _runPrecisionCalibration();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.deepPurple,
                foregroundColor: Colors.white,
              ),
              child: Text('üéØ –ù–∞—á–∞—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É'),
            ),
          ],
        ),
      ),
    );
  }

  String _getCurrentTimeOfDay() {
    final hour = DateTime.now().hour;
    if (hour >= 6 && hour < 12) return '–£—Ç—Ä–æ (6-12)';
    if (hour >= 12 && hour < 18) return '–î–µ–Ω—å (12-18)';
    if (hour >= 18 && hour < 22) return '–í–µ—á–µ—Ä (18-22)';
    return '–ù–æ—á—å (22-6)';
  }

  Future<void> _runPrecisionCalibration() async {
    if (_xController.text.isEmpty || _yController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    final orientations = [
      {
        'name': '–ü–æ—Ä—Ç—Ä–µ—Ç', 
        'icon': 'üì±', 
        'instruction': '–î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ',
        'detail': '–≠–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –≤–∞—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Å—Ç–æ–∏—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ'
      },
      {
        'name': '–ê–ª—å–±–æ–º –≤–ø—Ä–∞–≤–æ', 
        'icon': 'üì≤', 
        'instruction': '–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ 90¬∞ –≤–ø—Ä–∞–≤–æ',
        'detail': '–ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π —Å–ø—Ä–∞–≤–∞, —ç–∫—Ä–∞–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ'
      },
      {
        'name': '–ü–æ—Ä—Ç—Ä–µ—Ç –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏', 
        'icon': 'üôÉ', 
        'instruction': '–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ 180¬∞',
        'detail': '–¢–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç, –∫–∞–º–µ—Ä–∞ –≤–Ω–∏–∑—É'
      },
      {
        'name': '–ê–ª—å–±–æ–º –≤–ª–µ–≤–æ', 
        'icon': 'üì≥', 
        'instruction': '–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ 270¬∞',
        'detail': '–ö–Ω–æ–ø–∫–∞ –¥–æ–º–æ–π —Å–ª–µ–≤–∞, —ç–∫—Ä–∞–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ'
      },
    ];

    for (int i = 0; i < orientations.length; i++) {
      final orientation = orientations[i];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      await showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => StatefulBuilder(
          builder: (context, setState) => AlertDialog(
            title: Text('${orientation['icon']} ${orientation['name']}'),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Text(
                    orientation['instruction']!,
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 8),
                  Text(
                    orientation['detail']!,
                    style: TextStyle(fontSize: 14, color: Colors.grey[600]),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 16),
                  
                  // –ö–æ–º–ø–∞—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                  StreamBuilder<Map<String, dynamic>>(
                    stream: Stream.periodic(Duration(milliseconds: 200), (_) => _currentSensorValues),
                    builder: (context, snapshot) {
                      final azimuth = _currentSensorValues['azimuth'] ?? 0.0;
                      final compassDir = _currentSensorValues['compass_direction'] ?? 'Calibrating';
                      
                      return CompassWidget(
                        azimuth: azimuth,
                        compassDirection: compassDir,
                        size: 150,
                      );
                    },
                  ),
                  
                  SizedBox(height: 12),
                  Container(
                    padding: EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.blue[50],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Column(
                      children: [
                        Text('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${_xController.text}, ${_yController.text})'),
                        Text('–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è ${i + 1} –∏–∑ ${orientations.length}'),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
                child: Text('‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏'),
              ),
            ],
          ),
        ),
      );

      // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
      for (int countdown = 3; countdown > 0; countdown--) {
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '‚è±Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ $countdown...\n${orientation['name']} - –¥–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ!',
              textAlign: TextAlign.center,
            ),
            duration: Duration(seconds: 1),
            backgroundColor: Colors.orange,
          ),
        );
        await Future.delayed(Duration(seconds: 1));
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      ScaffoldMessenger.of(context).clearSnackBars();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'üî¥ –ó–ê–ü–ò–°–¨: ${orientation['name']}\n15 —Å–µ–∫—É–Ω–¥ - –ù–ï –î–í–ò–ì–ê–ô–¢–ï–°–¨!',
            textAlign: TextAlign.center,
          ),
          duration: Duration(seconds: 15),
          backgroundColor: Colors.red,
        ),
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –º–µ—Ç–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      _startRecordingWithOrientation(orientation['name']!, i + 1, orientations.length);
      await Future.delayed(Duration(seconds: 15));
      _stopRecording();

      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      if (i < orientations.length - 1) {
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚úÖ ${orientation['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏...'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
        await Future.delayed(Duration(seconds: 2));
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π
    await Future.delayed(Duration(seconds: 1));
    await _saveData();

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üéâ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('‚úÖ –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö 4 –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è—Ö'),
            Text('üìç –¢–æ—á–∫–∞: (${_xController.text}, ${_yController.text})'),
            Text('üïê –í—Ä–µ–º—è: ${DateTime.now().toString().split('.')[0]}'),
            if (_currentConditions.isNotEmpty) ...[
              SizedBox(height: 4),
              Text('üìã –£—Å–ª–æ–≤–∏—è: $_currentConditions'),
            ],
            Text('üìä –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏'),
            SizedBox(height: 12),
            Container(
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.green[50],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° –î–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:',
                    style: TextStyle(color: Colors.green[800], fontWeight: FontWeight.bold),
                  ),
                  Text('‚Ä¢ –í –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è (—É—Ç—Ä–æ–º, –¥–Ω–µ–º, –≤–µ—á–µ—Ä–æ–º)', style: TextStyle(fontSize: 12)),
                  Text('‚Ä¢ –ü—Ä–∏ —Ä–∞–∑–Ω–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ª—é–¥—å–º–∏', style: TextStyle(fontSize: 12)),
                  Text('‚Ä¢ –í —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (–¥–æ–∂–¥—å, —Ä–µ–º–æ–Ω—Ç, etc)', style: TextStyle(fontSize: 12)),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _showCalibrationSettings(); // –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            },
            child: Text('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // –û—á–∏—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
              _xController.clear();
              _yController.clear();
              setState(() {
                _selectedPoiType = null;
              });
              _descriptionController.clear();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: Text('‚úÖ –ì–æ—Ç–æ–≤–æ! –ö —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ'),
          ),
        ],
      ),
    );
  }

  void _startRecordingWithOrientation(String orientation, int current, int total) {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫ –∑–∞–ø–∏—Å–∏
    _sensorService.setOrientation('$orientation (${current}/$total)');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–Ω—Å–æ—Ä
    if (_currentConditionsList.isNotEmpty) {
      // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
      final fullDescription = _descriptionController.text.isEmpty 
          ? _currentConditions
          : '${_descriptionController.text} | $_currentConditions';
      _sensorService.setPoiInfo(_selectedPoiType, fullDescription);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–ø–∏—Å—å
    _startRecording();
    
    print('üéØ –ù–∞—á–∞—Ç–∞ —Ç–æ—á–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞: $orientation –≤ —Ç–æ—á–∫–µ (${_xController.text}, ${_yController.text})');
    print('üìã –£—Å–ª–æ–≤–∏—è: $_currentConditions');
  }

  Future<void> _showSavedFiles() async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final files = directory.listSync().where((f) => f.path.endsWith('.csv')).toList();
      
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'),
          content: Container(
            width: double.maxFinite,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('–ü–∞–ø–∫–∞:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 4),
                SelectableText(
                  directory.path,
                  style: TextStyle(fontSize: 12, fontFamily: 'monospace'),
                ),
                SizedBox(height: 16),
                Text('–§–∞–π–ª—ã CSV:', style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                if (files.isEmpty)
                  Text('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ CSV')
                else
                  ...files.map((file) {
                    final fileName = file.path.split('/').last;
                    final stat = file.statSync();
                    return Container(
                      margin: EdgeInsets.only(bottom: 8),
                      padding: EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.blue[50],
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(fileName, style: TextStyle(fontWeight: FontWeight.bold)),
                          Text('–†–∞–∑–º–µ—Ä: ${(stat.size / 1024).toStringAsFixed(1)} KB'),
                          Text('–ò–∑–º–µ–Ω–µ–Ω: ${DateTime.fromMillisecondsSinceEpoch(stat.modified.millisecondsSinceEpoch).toString().split('.')[0]}'),
                        ],
                      ),
                    );
                  }).toList(),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('OK'),
            ),
          ],
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')),
      );
    }
  }

  Future<void> _exportAllData() async {
    try {
      // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö CSV –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–∞–ø–∫–∏
      final directory = await getApplicationDocumentsDirectory();
      final allFiles = directory.listSync();
      final csvFiles = allFiles.where((f) => f.path.endsWith('.csv')).toList();
      
      List<String> copiedFiles = [];
      
      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ Downloads
      for (final csvFile in csvFiles) {
        final fileName = csvFile.path.split('/').last;
        final downloadsPath = '/storage/emulated/0/Download';
        final backupFile = File('$downloadsPath/backup_$fileName');
        await File(csvFile.path).copy(backupFile.path);
        copiedFiles.add('backup_$fileName');
      }
      
      // –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ä—Ç—ã
      final mapFile = File('${directory.path}/indoor_map.json');
      String? mapPath;
      if (await mapFile.exists()) {
        final downloadsPath = '/storage/emulated/0/Download';
        final backupMapFile = File('$downloadsPath/unde_backup_map.json');
        await mapFile.copy(backupMapFile.path);
        mapPath = backupMapFile.path;
      }
      
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('üõ°Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ Downloads:'),
              SizedBox(height: 12),
              if (copiedFiles.isNotEmpty) ...[
                Text('üìä CSV —Ñ–∞–π–ª—ã (${copiedFiles.length}):', style: TextStyle(fontWeight: FontWeight.bold)),
                ...copiedFiles.map((file) => Text('‚Ä¢ $file', style: TextStyle(fontSize: 12))),
                SizedBox(height: 8),
              ],
              if (mapPath != null) ...[
                Text('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è:', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('‚Ä¢ unde_backup_map.json', style: TextStyle(fontSize: 12)),
                SizedBox(height: 8),
              ],
              SizedBox(height: 8),
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.green[50],
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Text(
                  '‚úÖ –í—Å–µ ${copiedFiles.length} CSV —Ñ–∞–π–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!',
                  style: TextStyle(color: Colors.green[800]),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('OK'),
            ),
          ],
        ),
      );
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _importBackupData() async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final downloadsPath = '/storage/emulated/0/Download';
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
      final backupMapFile = File('$downloadsPath/unde_backup_map.json');
      if (await backupMapFile.exists()) {
        final mapFile = File('${directory.path}/indoor_map.json');
        await backupMapFile.copy(mapFile.path);
      }
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'),
          backgroundColor: Colors.green,
        ),
      );
      
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Widget _buildSensorCard(String title, String value, {Color? color}) {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
            SizedBox(height: 4),
            Text(
              value,
              style: TextStyle(fontSize: 18, fontFamily: 'monospace'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final isRecording = _sensorService.isRecording;
    
    return Scaffold(
      appBar: AppBar(
        title: Text('UNDE - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö'),
        backgroundColor: isRecording ? Colors.red[400] : Colors.blue[400],
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            Container(
              padding: EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: isRecording ? Colors.red[50] : Colors.grey[100],
                borderRadius: BorderRadius.circular(8.0),
                border: Border.all(
                  color: isRecording ? Colors.red : Colors.grey,
                  width: 2.0,
                ),
              ),
              child: Column(
                children: [
                  Text(
                    isRecording ? 'üî¥ –ò–î–ï–¢ –ó–ê–ü–ò–°–¨' : '‚≠ï –ó–ê–ü–ò–°–¨ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: isRecording ? Colors.red : Colors.grey[600],
                    ),
                  ),
                  if (isRecording && _recordingStats['totalPoints'] != null)
                    Text(
                      '–ó–∞–ø–∏—Å–∞–Ω–æ —Ç–æ—á–µ–∫: ${_recordingStats['totalPoints']} | –í—Ä–µ–º—è: ${(_recordingStats['durationSeconds'] ?? 0)}—Å',
                      style: TextStyle(fontSize: 14),
                    ),
                ],
              ),
            ),
            
            SizedBox(height: 20),

            // –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –∑–∞–ø–∏—Å–∏
            if (_currentConditions.isNotEmpty)
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange[50],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange[300]!),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üåü –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –∑–∞–ø–∏—Å–∏:',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 4),
                    Text(
                      _currentConditions,
                      style: TextStyle(fontSize: 12),
                    ),
                  ],
                ),
              ),
            
            SizedBox(height: 20),
            
            // –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
            Text('–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            
            // –ú–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä —Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π + –∫–æ–º–ø–∞—Å
            Row(
              children: [
                Expanded(
                  child: _buildSensorCard(
                    '–ú–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä (ŒºT) + –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è',
                    'X: ${_currentSensorValues['magnetometer_x']?.toStringAsFixed(2) ?? '‚Äî'}\n'
                    'Y: ${_currentSensorValues['magnetometer_y']?.toStringAsFixed(2) ?? '‚Äî'}\n'
                    'Z: ${_currentSensorValues['magnetometer_z']?.toStringAsFixed(2) ?? '‚Äî'}\n'
                    '–ú–∞–≥–Ω–∏—Ç—É–¥–∞: ${_currentSensorValues['magnetic_magnitude']?.toStringAsFixed(2) ?? '‚Äî'} ŒºT\n'
                    '–ê–∑–∏–º—É—Ç: ${_currentSensorValues['azimuth']?.toStringAsFixed(1) ?? '‚Äî'}¬∞\n'
                    '–ö–æ–º–ø–∞—Å: ${_currentSensorValues['compass_direction'] ?? '‚Äî'}\n'
                    '–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${_currentSensorValues['device_orientation'] ?? '‚Äî'}',
                    color: Colors.purple,
                  ),
                ),
                SizedBox(width: 16),
                // –ú–∏–Ω–∏-–∫–æ–º–ø–∞—Å
                CompassWidget(
                  azimuth: _currentSensorValues['azimuth'] ?? 0.0,
                  compassDirection: _currentSensorValues['compass_direction'] ?? '',
                  size: 80,
                  showText: false,
                ),
              ],
            ),
            
            // –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä
            _buildSensorCard(
              '–ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä (m/s¬≤)',
              'X: ${_currentSensorValues['accelerometer_x']?.toStringAsFixed(2) ?? '‚Äî'}\n'
              'Y: ${_currentSensorValues['accelerometer_y']?.toStringAsFixed(2) ?? '‚Äî'}\n'
              'Z: ${_currentSensorValues['accelerometer_z']?.toStringAsFixed(2) ?? '‚Äî'}',
              color: Colors.green,
            ),
            
            // –ì–∏—Ä–æ—Å–∫–æ–ø
            _buildSensorCard(
              '–ì–∏—Ä–æ—Å–∫–æ–ø (rad/s)',
              'X: ${_currentSensorValues['gyroscope_x']?.toStringAsFixed(2) ?? '‚Äî'}\n'
              'Y: ${_currentSensorValues['gyroscope_y']?.toStringAsFixed(2) ?? '‚Äî'}\n'
              'Z: ${_currentSensorValues['gyroscope_z']?.toStringAsFixed(2) ?? '‚Äî'}',
              color: Colors.orange,
            ),

            // PDR –¥–∞–Ω–Ω—ã–µ
            _buildSensorCard(
              'PDR (–ü–µ—à–µ—Ö–æ–¥–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)',
              '–®–∞–≥–∏: ${_currentSensorValues['step_count'] ?? 0}\n'
              '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${_currentSensorValues['heading']?.toStringAsFixed(1) ?? '‚Äî'}¬∞\n'
              '–î–∞–≤–ª–µ–Ω–∏–µ: ${_currentSensorValues['pressure']?.toStringAsFixed(2) ?? '‚Äî'} hPa',
              color: Colors.blue,
            ),
            
            SizedBox(height: 20),

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º
            Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),

            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _importFloorPlan,
                    icon: Icon(Icons.upload_file),
                    label: Text('–ò–ú–ü–û–†–¢ –ü–õ–ê–ù–ê'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.teal,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
                SizedBox(width: 10),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _showConditionsDialog,
                    icon: Icon(Icons.tune),
                    label: Text('–£–°–õ–û–í–ò–Ø'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
              ],
            ),

            SizedBox(height: 10),

            ElevatedButton.icon(
              onPressed: _managePresetPoints,
              icon: Icon(Icons.location_searching),
              label: Text('–ü–†–ï–î–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –¢–û–ß–ö–ò'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.indigo,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 12),
              ),
            ),

            SizedBox(height: 10),

            ElevatedButton.icon(
              onPressed: _startPrecisionCalibration,
              icon: Icon(Icons.tune),
              label: Text('üéØ –¢–û–ß–ù–ê–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ê'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.deepPurple,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 12),
              ),
            ),
            
            SizedBox(height: 20),
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏
            Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            
            // –í—ã–±–æ—Ä —ç—Ç–∞–∂–∞ –∏ —Å–±—Ä–æ—Å —à–∞–≥–æ–≤
            Row(
              children: [
                Text('–≠—Ç–∞–∂: ', style: TextStyle(fontSize: 16)),
                DropdownButton<String>(
                  value: _selectedFloor,
                  items: ['1', '2', '3', '4', '5'].map((floor) {
                    return DropdownMenuItem(value: floor, child: Text(floor));
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      _selectedFloor = value!;
                    });
                    _sensorService.setFloor(value!);
                  },
                ),
                Spacer(),
                ElevatedButton.icon(
                  onPressed: _resetStepCounter,
                  icon: Icon(Icons.refresh, size: 16),
                  label: Text('–°–±—Ä–æ—Å —à–∞–≥–æ–≤'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey[300],
                    foregroundColor: Colors.black87,
                  ),
                ),
              ],
            ),
            
            SizedBox(height: 15),

            // –¢–∏–ø —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            Text('–¢–∏–ø —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
            SizedBox(height: 5),
            DropdownButtonFormField<String>(
              value: _selectedPoiType,
              decoration: InputDecoration(
                hintText: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—á–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                border: OutlineInputBorder(),
                contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              ),
              items: _poiTypes.map((type) {
                return DropdownMenuItem(value: type, child: Text(type));
              }).toList(),
              onChanged: (value) {
                setState(() {
                  _selectedPoiType = value;
                });
              },
            ),

            SizedBox(height: 10),

            // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏
            TextField(
              controller: _descriptionController,
              decoration: InputDecoration(
                labelText: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞–≥–∞–∑–∏–Ω Apple", "–ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥"',
                border: OutlineInputBorder(),
              ),
              maxLines: 2,
            ),
            
            SizedBox(height: 10),
            
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _xController,
                    decoration: InputDecoration(
                      labelText: 'X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                ),
                SizedBox(width: 10),
                Expanded(
                  child: TextField(
                    controller: _yController,
                    decoration: InputDecoration(
                      labelText: 'Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', 
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                ),
              ],
            ),

            SizedBox(height: 10),

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _openMapScreen,
                    icon: Icon(Icons.map),
                    label: Text('–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                SizedBox(width: 10),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _markPosition,
                    icon: Icon(Icons.location_on),
                    label: Text('–û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ—á–∫—É'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.amber,
                      foregroundColor: Colors.black,
                    ),
                  ),
                ),
              ],
            ),
            
            SizedBox(height: 10),
            
            // –ò–º—è —Ñ–∞–π–ª–∞
            TextField(
              controller: _fileNameController,
              decoration: InputDecoration(
                labelText: '–ò–º—è —Ñ–∞–π–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                border: OutlineInputBorder(),
                hintText: 'magnetic_map_floor_1',
              ),
            ),
            
            SizedBox(height: 20),
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: isRecording ? null : _startRecording,
                    child: Text('–ù–ê–ß–ê–¢–¨ –ó–ê–ü–ò–°–¨'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 15),
                    ),
                  ),
                ),
                SizedBox(width: 10),
                Expanded(
                  child: ElevatedButton(
                    onPressed: !isRecording ? null : _stopRecording,
                    child: Text('–û–°–¢–ê–ù–û–í–ò–¢–¨'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 15),
                    ),
                  ),
                ),
              ],
            ),
            
            SizedBox(height: 10),
            
            ElevatedButton(
              onPressed: _locationRecorder.dataPointsCount > 0 ? _saveData : null,
              child: Text('–°–û–•–†–ê–ù–ò–¢–¨ –î–ê–ù–ù–´–ï'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 15),
              ),
            ),

            SizedBox(height: 10),

            ElevatedButton.icon(
              onPressed: _showSavedFiles,
              icon: Icon(Icons.folder_open),
              label: Text('–ü–û–ö–ê–ó–ê–¢–¨ –§–ê–ô–õ–´'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 15),
              ),
            ),

            SizedBox(height: 20),

            // –ö–Ω–æ–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            Text('–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),

            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _exportAllData,
                    icon: Icon(Icons.backup),
                    label: Text('–°–û–ó–î–ê–¢–¨ –ë–≠–ö–ê–ü'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 15),
                    ),
                  ),
                ),
                SizedBox(width: 10),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _importBackupData,
                    icon: Icon(Icons.restore),
                    label: Text('–í–û–°–°–¢–ê–ù–û–í–ò–¢–¨'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 15),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
