// lib/services/server_service.dart - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../config/users.dart';

class ServerService {
  static const String baseUrl = 'http://5.129.223.192'; // ‚úÖ –í–∞—à —Å–µ—Ä–≤–µ—Ä
  
  String? _authToken;
  String? _deviceId;
  int? _teamId;
  int? _projectId;
  Map<String, dynamic>? _currentUser;

  // Singleton pattern
  static final ServerService _instance = ServerService._internal();
  factory ServerService() => _instance;
  ServerService._internal();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    final prefs = await SharedPreferences.getInstance();
    _authToken = prefs.getString('auth_token');
    _deviceId = prefs.getString('device_id');
    _teamId = prefs.getInt('team_id');
    _projectId = prefs.getInt('project_id');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await loadCurrentUser();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    if (_authToken != null) 'Authorization': 'Bearer $_authToken',
  };

  // ================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò - –ò–°–ü–†–ê–í–õ–ï–ù–û
  // ================================

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–û
  Future<bool> loginUser(String login, String password) async {
    final user = await UserConfig.findUser(login, password); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ await
    
    if (user != null) {
      _currentUser = user; // ‚úÖ –¢–µ–ø–µ—Ä—å user —É–∂–µ Map, –Ω–µ Future
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt('current_user_id', user['id']); // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
      await prefs.setString('current_user_name', user['name']); // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
      await prefs.setString('current_user_role', user['role']); // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
      await prefs.setInt('team_id', user['team_id']); // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
      
      _teamId = user['team_id']; // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º device ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (_deviceId == null) {
        _deviceId = await _generateDeviceId();
        await prefs.setString('device_id', _deviceId!);
      }
      
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user['name']} (${user['role']})'); // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
      return true;
    }
    
    return false;
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
  Future<void> loadCurrentUser() async {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getInt('current_user_id');
    
    if (userId != null) {
      _currentUser = await UserConfig.getUserById(userId); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ await
      _teamId = prefs.getInt('team_id');
    }
  }
  
  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logoutUser() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('current_user_id');
    await prefs.remove('current_user_name');
    await prefs.remove('current_user_role');
    await prefs.remove('auth_token');
    
    _currentUser = null;
    _authToken = null;
  }

  // ================================
  // –û–°–ù–û–í–ù–´–ï API –ú–ï–¢–û–î–´
  // ================================

  // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
  Future<bool> testConnection() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/health'),
        headers: _headers,
      ).timeout(Duration(seconds: 10));

      return response.statusCode == 200;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
  Future<List<dynamic>?> getProjects() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/projects'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: $e');
      return null;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  Future<Map<String, dynamic>?> createProject(String name, String description) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/api/projects'),
        headers: _headers,
        body: jsonEncode({
          'name': name,
          'description': description,
        }),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $e');
      return null;
    }
  }

  // ================================
  // –†–ê–ë–û–¢–ê –° –ö–û–ú–ê–ù–î–ê–ú–ò
  // ================================

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
  Future<Map<String, dynamic>?> registerDevice(String deviceName, String teamCode) async {
    try {
      final deviceId = _deviceId ?? await _generateDeviceId();
      
      final response = await http.post(
        Uri.parse('$baseUrl/api/auth/register-device'),
        headers: _headers,
        body: jsonEncode({
          'deviceId': deviceId,
          'deviceName': deviceName,
          'teamCode': teamCode,
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('auth_token', data['token']);
        await prefs.setString('device_id', deviceId);
        await prefs.setInt('team_id', data['team']['id']);
        await prefs.setInt('project_id', data['team']['project_id']);
        
        _authToken = data['token'];
        _deviceId = deviceId;
        _teamId = data['team']['id'];
        _projectId = data['team']['project_id'];
        
        return data;
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
  Future<List<dynamic>?> getTeamMembers() async {
    if (_teamId == null) return null;
    
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/teams/$_teamId/members'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: $e');
      return null;
    }
  }

  // ================================
  // –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –î–ê–¢–ß–ò–ö–û–í
  // ================================

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<bool> uploadSensorDataWithUser(List<Map<String, dynamic>> sensorData) async {
    if (_projectId == null) {
      print('‚ö†Ô∏è Project ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID=1');
      _projectId = 1;
    }
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∫ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –¥–∞–Ω–Ω—ã—Ö
      final enrichedData = sensorData.map((point) => {
        ...point,
        'collector_id': _currentUser?['id'],
        'collector_name': _currentUser?['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
        'collector_role': _currentUser?['role'] ?? 'collector',
        'collected_at': DateTime.now().toIso8601String(),
      }).toList();
      
      final response = await http.post(
        Uri.parse('$baseUrl/api/sensor-data/batch'),
        headers: _headers,
        body: jsonEncode({
          'deviceId': _deviceId ?? await _generateDeviceId(),
          'projectId': _projectId,
          'floorId': 1,
          'data': enrichedData,
          'user_info': {
            'id': _currentUser?['id'],
            'name': _currentUser?['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
            'role': _currentUser?['role'] ?? 'collector',
          }
        }),
      );

      if (response.statusCode == 200) {
        final result = jsonDecode(response.body);
        print('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result['inserted']} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        if (_currentUser != null) {
          print('üë§ –°–±–æ—Ä—â–∏–∫: ${_currentUser!['name']}');
        }
        return true;
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.body}');
      }
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      return false;
    }
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  Future<bool> uploadSensorDataBatch(List<Map<String, dynamic>> sensorData) async {
    return await uploadSensorDataWithUser(sensorData);
  }

  // ================================
  // –†–ê–ë–û–¢–ê –° –ü–õ–ê–ù–ê–ú–ò –ó–î–ê–ù–ò–ô
  // ================================

  Future<List<dynamic>?> getFloors(int projectId) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/projects/$projectId/floors'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>?> uploadFloorPlan(int projectId, int floorNumber, File planFile) async {
    try {
      print('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–Ω–∞: –ø—Ä–æ–µ–∫—Ç=$projectId, —ç—Ç–∞–∂=$floorNumber');
      
      var request = http.MultipartRequest(
        'POST',
        Uri.parse('$baseUrl/api/projects/$projectId/floors'),
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ Content-Type (multipart —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–∞–º)
      final headers = Map<String, String>.from(_headers);
      headers.remove('Content-Type');
      request.headers.addAll(headers);
      
      request.fields['floorNumber'] = floorNumber.toString();
      request.files.add(await http.MultipartFile.fromPath('floorPlan', planFile.path));

      print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞: ${request.url}');
      print('üìã –ü–æ–ª—è: ${request.fields}');
      print('üìÅ –§–∞–π–ª: ${planFile.path} (${await planFile.length()} –±–∞–π—Ç)');

      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      print('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞: $e');
      return null;
    }
  }

  // ================================
  // LOCALIZATION API
  // ================================

  Future<Map<String, dynamic>?> getMagneticMap(int projectId, int floorId) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/localization/$projectId/$floorId/magnetic-map'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–≥–Ω–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã: $e');
      return null;
    }
  }

  Future<List<dynamic>?> getPoiData(int projectId, int floorId) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/api/localization/$projectId/$floorId/poi-data'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è POI –¥–∞–Ω–Ω—ã—Ö: ${response.body}');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è POI –¥–∞–Ω–Ω—ã—Ö: $e');
      return null;
    }
  }

  // ================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ================================

  Future<String> _generateDeviceId() async {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = (timestamp % 10000).toString().padLeft(4, '0');
    final platform = Platform.isAndroid ? 'android' : 'ios';
    return 'device_${platform}_${timestamp}_$random';
  }

  // ================================
  // –ì–ï–¢–¢–ï–†–´
  // ================================

  String? get deviceId => _deviceId;
  int? get teamId => _teamId;
  int? get projectId => _projectId;
  bool get isAuthenticated => _authToken != null;
  String get serverUrl => baseUrl;
  
  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Map<String, dynamic>? get currentUser => _currentUser;
  String? get currentUserName => _currentUser?['name'];
  String? get currentUserRole => _currentUser?['role'];
  int? get currentUserId => _currentUser?['id'];
  bool get isLoggedIn => _currentUser != null;
  bool get isCoordinator => _currentUser?['role'] == 'coordinator';
  bool get isCollector => _currentUser?['role'] == 'collector';
}
